{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/dimitri/Desktop/E\\u0301cole/Hetic/ReactJS/the-trivia/src/views/Category/Category.js\";\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar Category = function Category(_ref) {\n  var category = _ref.category,\n      currentQuestionIndex = _ref.currentQuestionIndex,\n      handleSubmit = _ref.handleSubmit,\n      answerInput = _ref.answerInput,\n      nextQuestion = _ref.nextQuestion,\n      resetScore = _ref.resetScore,\n      score = _ref.score,\n      error = _ref.error;\n  var currentQuestion = category.clues[currentQuestionIndex];\n\n  handleSubmit = function handleSubmit(e) {\n    // here I prevent the default bh of submitting form\n    e.preventDefault(); // write logic to handle good/bad answer\n    // increment currentQuestion\n    // save in the storage the id of the question\n    // if no more question, remove category from categories playable\n    // increment score somewhere and redirect to /\n\n    var answer = _this.answerInput.current.value; // check if answer is equal to the requested answer from the current question\n\n    if (answer === currentQuestion.answer) {\n      // On rajoute 1 au score\n      console.log(\"OK\");\n    } else {\n      // On rajoute 1 au nombre d'erreur\n      console.log(\"not ok\");\n    }\n  };\n\n  return React.createElement(\"section\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"You choosed: \", category.title), React.createElement(\"div\", {\n    className: \"question\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"question__title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, currentQuestion.question), React.createElement(\"div\", {\n    className: \"question__answerInput\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    ref: answerInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: \"question__submit\",\n    type: \"submit\",\n    onClick: function onClick() {\n      return nextQuestion();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Next\"), React.createElement(\"button\", {\n    className: \"\",\n    type: \"submit\",\n    onClick: function onClick() {\n      return resetScore();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"reset\"), React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Your score:\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, score), React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Errors:\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, error))));\n};\n\nCategory.propTypes = {\n  category: PropTypes.shape({}).isRequired,\n  currentQuestionIndex: PropTypes.number.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  answerInput: PropTypes.shape({\n    value: PropTypes.instanceOf(HTMLInputElement)\n  })\n};\nexport default Category;","map":{"version":3,"sources":["/Users/dimitri/Desktop/École/Hetic/ReactJS/the-trivia/src/views/Category/Category.js"],"names":["React","PropTypes","Category","category","currentQuestionIndex","handleSubmit","answerInput","nextQuestion","resetScore","score","error","currentQuestion","clues","e","preventDefault","answer","current","value","console","log","title","question","propTypes","shape","isRequired","number","func","instanceOf","HTMLInputElement"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Category = ({ category, currentQuestionIndex, handleSubmit, answerInput, nextQuestion, resetScore, score, error }) => {\n  const currentQuestion = category.clues[currentQuestionIndex];\n\n  handleSubmit = (e) => {\n    // here I prevent the default bh of submitting form\n    e.preventDefault();\n    // write logic to handle good/bad answer\n    // increment currentQuestion\n    // save in the storage the id of the question\n    // if no more question, remove category from categories playable\n    // increment score somewhere and redirect to /\n\n    const answer = this.answerInput.current.value;\n    // check if answer is equal to the requested answer from the current question\n    if(answer === currentQuestion.answer) {\n      // On rajoute 1 au score\n      console.log(\"OK\")\n    } else {\n      // On rajoute 1 au nombre d'erreur\n      console.log(\"not ok\")\n    }\n  }\n\n  return (\n    <section>\n      <form onSubmit={handleSubmit}>\n        <h1>You choosed: {category.title}</h1>\n        <div className=\"question\">\n          <h3 className=\"question__title\">\n            {currentQuestion.question}\n          </h3>\n          <div className=\"question__answerInput\">\n            {/* We give the ref below in order check the value */}\n            <input ref={answerInput} />\n          </div>\n          <button className=\"question__submit\" type=\"submit\" onClick={() => nextQuestion()}>\n            Next\n          </button>\n          <button className=\"\" type=\"submit\" onClick={() => resetScore()}>\n            reset\n          </button>\n          <h4>Your score:</h4><p>{score}</p>\n          <h4>Errors:</h4><p>{error}</p>\n        </div>\n      </form>\n    </section>\n  );\n}\n\nCategory.propTypes = {\n  category: PropTypes.shape({}).isRequired,\n  currentQuestionIndex: PropTypes.number.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  answerInput: PropTypes.shape({\n    value: PropTypes.instanceOf(HTMLInputElement)\n  }),\n};\n\nexport default Category;"]},"metadata":{},"sourceType":"module"}