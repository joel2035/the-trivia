{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kamgang/Desktop/React/exercice2/the-trivia/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kamgang/Desktop/React/exercice2/the-trivia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kamgang/Desktop/React/exercice2/the-trivia/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kamgang/Desktop/React/exercice2/the-trivia/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kamgang/Desktop/React/exercice2/the-trivia/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kamgang/Desktop/React/exercice2/the-trivia/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kamgang/Desktop/React/exercice2/the-trivia/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kamgang/Desktop/React/exercice2/the-trivia/src/views/Category/CategoryContainer.js\";\nimport React, { Component, createRef } from 'react';\nimport api from '../../helpers/api';\nimport Category from './Category';\nimport './Category.css';\n\nvar CategoryContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CategoryContainer, _Component);\n\n  function CategoryContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CategoryContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CategoryContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      category: null,\n      currentQuestion: 0,\n      score: 0,\n      life: 3,\n      answerFalse: \"\",\n      gameOver: \"\" // createRef in order to bring back input value to its parent\n\n    };\n    _this.answerInput = createRef();\n\n    _this.handleSubmit = function (e) {\n      var _this$state = _this.state,\n          category = _this$state.category,\n          currentQuestion = _this$state.currentQuestion,\n          score = _this$state.score,\n          life = _this$state.life;\n      var divGameOver = document.getElementById('gameOver');\n      var answer = _this.answerInput.current.value;\n      e.preventDefault();\n      console.log(category.clues); // On affiche dans la console les questions et reponses\n      // Vérification de la reponse\n\n      if (answer === category.clues[currentQuestion].answer) {\n        _this.setState({\n          score: score + 1,\n          answerFalse: \"\",\n          currentQuestion: currentQuestion + 1\n        });\n\n        _this.answerInput.current.value = \"\";\n\n        if (currentQuestion === 4) {\n          window.location.replace(\"/\");\n        } // Stockage du score et de la vie\n\n\n        var saveCurrent = [currentQuestion, score, life];\n        storage.setStorageItem('category' + _this.state.category.id, saveCurrent);\n      } else {\n        _this.setState({\n          life: life - 1,\n          answerFalse: \"Answer is false\"\n        }); // Affichage du game over si life = 0\n\n\n        if (life === 1) {\n          divGameOver.style.display = \"initial\";\n        } // Stockage du score et de la vie\n\n\n        var saveCurrentQuestion = currentQuestion + parseInt(1);\n        var saveScore = score + parseInt(1);\n        var savelife = life + parseInt(1);\n        var _saveCurrent = [saveCurrentQuestion, saveScore, savelife];\n        storage.setStorageItem('category' + _this.state.category.id, _saveCurrent);\n      }\n    };\n\n    _this.changeCategory = function () {\n      window.location.replace(\"/\");\n    };\n\n    _this.resetScore = function () {\n      var divGameOver = document.getElementById('gameOver');\n      divGameOver.style.display = \"none\"; // On supprime l'ensemble des sauvegarde de la categorie\n\n      storage.removeStorageItem('category' + _this.state.category.id);\n\n      _this.setState({\n        score: 0,\n        life: 3,\n        answerFalse: \"\"\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CategoryContainer, [{\n    key: \"componentDidMount\",\n    // async needed when using promise\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var data, currentStorage;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return api.getCategoryById(this.props.match.params.id);\n\n              case 2:\n                data = _context.sent;\n                // stored response in the state;\n                this.setState({\n                  category: data\n                });\n                currentStorage = storage.getStorageItem('category' + this.state.category.id); // On vérifie si une sauvegarde n'existe pas dans le cache\n\n                if (currentStorage != null) {\n                  this.setState({\n                    currentQuestion: currentStorage[0],\n                    score: currentStorage[1],\n                    life: currentStorage[2]\n                  });\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }() // Fonction vérification\n\n  }, {\n    key: \"render\",\n    //\n    value: function render() {\n      var _this$state2 = this.state,\n          category = _this$state2.category,\n          currentQuestion = _this$state2.currentQuestion,\n          score = _this$state2.score,\n          life = _this$state2.life,\n          answerFalse = _this$state2.answerFalse;\n      if (!category) return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \" is loading \");\n      return React.createElement(Category, {\n        category: category,\n        currentQuestion: category.clues[currentQuestion].question,\n        handleSubmit: this.handleSubmit,\n        answerInput: this.answerInput,\n        changeCategory: this.changeCategory,\n        resetScore: this.resetScore,\n        score: score,\n        life: life,\n        answerFalse: answerFalse,\n        gameOver: this.gameOver,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CategoryContainer;\n}(Component);\n\nexport default CategoryContainer;","map":{"version":3,"sources":["/Users/kamgang/Desktop/React/exercice2/the-trivia/src/views/Category/CategoryContainer.js"],"names":["React","Component","createRef","api","Category","CategoryContainer","state","category","currentQuestion","score","life","answerFalse","gameOver","answerInput","handleSubmit","e","divGameOver","document","getElementById","answer","current","value","preventDefault","console","log","clues","setState","window","location","replace","saveCurrent","storage","setStorageItem","id","style","display","saveCurrentQuestion","parseInt","saveScore","savelife","changeCategory","resetScore","removeStorageItem","getCategoryById","props","match","params","data","currentStorage","getStorageItem","question"],"mappings":"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","sourcesContent":["import React, {\n  Component,\n  createRef\n} from 'react';\nimport api from '../../helpers/api';\nimport Category from './Category';\nimport './Category.css';\n\nclass CategoryContainer extends Component {\n  state = {\n    category: null,\n    currentQuestion: 0,\n    score: 0,\n    life: 3,\n    answerFalse: \"\",\n    gameOver: \"\",\n  }\n\n  // createRef in order to bring back input value to its parent\n  answerInput = createRef();\n\n  // async needed when using promise\n  async componentDidMount() {\n    let data = await api.getCategoryById(this.props.match.params.id);\n    // stored response in the state;\n    this.setState({\n      category: data,\n    });\n\n    let currentStorage = storage.getStorageItem('category' + this.state.category.id);\n    // On vérifie si une sauvegarde n'existe pas dans le cache\n    if (currentStorage != null) {\n      this.setState({\n        currentQuestion: currentStorage[0],\n        score: currentStorage[1],\n        life: currentStorage[2],\n      })\n    }\n  }\n\n  // Fonction vérification\n  handleSubmit = (e) => {\n    let {\n      category,\n      currentQuestion,\n      score,\n      life\n    } = this.state;\n    let divGameOver = document.getElementById('gameOver');\n    let answer = this.answerInput.current.value;\n\n    e.preventDefault();\n\n    console.log(category.clues) // On affiche dans la console les questions et reponses\n\n    // Vérification de la reponse\n    if (answer === category.clues[currentQuestion].answer) {\n      this.setState({\n        score: score + 1,\n        answerFalse: \"\",\n        currentQuestion: currentQuestion + 1,\n      })\n\n      this.answerInput.current.value = \"\";\n\n      if (currentQuestion === 4) {\n        window.location.replace(\"/\");\n      }\n\n      // Stockage du score et de la vie\n      let saveCurrent = [currentQuestion, score, life];\n      storage.setStorageItem('category' + this.state.category.id, saveCurrent)\n    } else {\n      this.setState({\n        life: life - 1,\n        answerFalse: \"Answer is false\"\n      })\n\n      // Affichage du game over si life = 0\n      if (life === 1) {\n        divGameOver.style.display = \"initial\";\n      }\n\n      // Stockage du score et de la vie\n      let saveCurrentQuestion = currentQuestion + parseInt(1);\n      let saveScore = score + parseInt(1);\n      let savelife = life + parseInt(1);\n      let saveCurrent = [saveCurrentQuestion, saveScore, savelife];\n      storage.setStorageItem('category' + this.state.category.id, saveCurrent)\n    }\n  }\n\n  // Le changement de categorie\n  changeCategory = () => {\n    window.location.replace(\"/\");\n  }\n\n  // Le reset du score et de la vie\n  resetScore = () => {\n    let divGameOver = document.getElementById('gameOver');\n\n    divGameOver.style.display = \"none\";\n\n    // On supprime l'ensemble des sauvegarde de la categorie\n    storage.removeStorageItem('category' + this.state.category.id)\n\n    this.setState({\n      score: 0,\n      life: 3,\n      answerFalse: \"\",\n    })\n  }\n\n  //\n\n  render() {\n    let {\n      category,\n      currentQuestion,\n      score,\n      life,\n      answerFalse\n    } = this.state;\n\n    if (!category) return <div > is loading < /div>\n\n    return ( <\n      Category category = {\n        category\n      }\n      currentQuestion = {\n        category.clues[currentQuestion].question\n      }\n      handleSubmit = {\n        this.handleSubmit\n      }\n      answerInput = {\n        this.answerInput\n      }\n      changeCategory = {\n        this.changeCategory\n      }\n      resetScore = {\n        this.resetScore\n      }\n      score = {\n        score\n      }\n      life = {\n        life\n      }\n      answerFalse = {\n        answerFalse\n      }\n      gameOver = {\n        this.gameOver\n      }\n      />\n    );\n  }\n}\n\nexport default CategoryContainer;"]},"metadata":{},"sourceType":"module"}