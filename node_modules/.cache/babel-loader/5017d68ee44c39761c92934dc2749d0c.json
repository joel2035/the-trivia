{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dimitri/Desktop/E\\u0301cole/Hetic/ReactJS/the-trivia/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dimitri/Desktop/E\\u0301cole/Hetic/ReactJS/the-trivia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/dimitri/Desktop/E\\u0301cole/Hetic/ReactJS/the-trivia/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/dimitri/Desktop/E\\u0301cole/Hetic/ReactJS/the-trivia/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/dimitri/Desktop/E\\u0301cole/Hetic/ReactJS/the-trivia/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/dimitri/Desktop/E\\u0301cole/Hetic/ReactJS/the-trivia/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/dimitri/Desktop/E\\u0301cole/Hetic/ReactJS/the-trivia/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/dimitri/Desktop/E\\u0301cole/Hetic/ReactJS/the-trivia/src/views/Category/CategoryContainer.js\";\nimport React, { Component, createRef } from 'react';\nimport api from '../../helpers/api';\nimport Category from './Category';\n\nvar CategoryContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CategoryContainer, _Component);\n\n  function CategoryContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CategoryContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CategoryContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      category: null,\n      currentQuestion: 0,\n      answerQuestion: null,\n      score: 2,\n      error: 0 // createRef in order to bring back input value to its parent\n\n    };\n    _this.answerInput = createRef();\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var answer = _this.answerInput.current.value;\n\n      if (answer === _this.state.answer) {\n        // On rajoute 1 au score\n        console.log(\"OK\");\n      } else {\n        // On rajoute 1 au nombre d'erreur\n        console.log(\"not ok\");\n      }\n    };\n\n    _this.nextQuestion = function () {\n      console.log(_this.state.category.clues[1].answer);\n    };\n\n    _this.resetScore = function () {\n      _this.setState({\n        score: 0,\n        error: 0\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CategoryContainer, [{\n    key: \"componentDidMount\",\n    // async needed when using promise\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return api.getCategoryById(this.props.match.params.id);\n\n              case 2:\n                data = _context.sent;\n                // stored response in the state;\n                this.setState({\n                  category: data\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }() // Vérification de la reponse\n\n  }, {\n    key: \"render\",\n    // \n    value: function render() {\n      var _this$state = this.state,\n          category = _this$state.category,\n          currentQuestion = _this$state.currentQuestion; // at first render, category will be null so we need to wait\n      // before using data.\n\n      if (!category) return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"is loading\");\n      return React.createElement(Category, {\n        category: category,\n        currentQuestionIndex: currentQuestion,\n        handleSubmit: this.handleSubmit // plug createRef to chidlren\n        ,\n        answerInput: this.answerInput,\n        nextQuestion: this.nextQuestion,\n        resetScore: this.resetScore,\n        score: this.state.score,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CategoryContainer;\n}(Component);\n\nexport default CategoryContainer;","map":{"version":3,"sources":["/Users/dimitri/Desktop/École/Hetic/ReactJS/the-trivia/src/views/Category/CategoryContainer.js"],"names":["React","Component","createRef","api","Category","CategoryContainer","state","category","currentQuestion","answerQuestion","score","error","answerInput","handleSubmit","e","preventDefault","answer","current","value","console","log","nextQuestion","clues","resetScore","setState","getCategoryById","props","match","params","id","data"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,QAAP,MAAqB,YAArB;;IAEMC,iB;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,IADJ;AAENC,MAAAA,eAAe,EAAE,CAFX;AAGNC,MAAAA,cAAc,EAAE,IAHV;AAINC,MAAAA,KAAK,EAAE,CAJD;AAKNC,MAAAA,KAAK,EAAE,CALD,CAQR;;AARQ,K;UASRC,W,GAAcV,SAAS,E;;UAYvBW,Y,GAAe,UAACC,CAAD,EAAO;AACpBA,MAAAA,CAAC,CAACC,cAAF;AAEA,UAAMC,MAAM,GAAG,MAAKJ,WAAL,CAAiBK,OAAjB,CAAyBC,KAAxC;;AACA,UAAGF,MAAM,KAAK,MAAKV,KAAL,CAAWU,MAAzB,EAAiC;AAC/B;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD,OAHD,MAGO;AACL;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD;AACF,K;;UAGDC,Y,GAAe,YAAM;AACnBF,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKd,KAAL,CAAWC,QAAX,CAAoBe,KAApB,CAA0B,CAA1B,EAA6BN,MAAzC;AACD,K;;UAGDO,U,GAAa,YAAM;AACjB,YAAKC,QAAL,CAAc;AACZd,QAAAA,KAAK,EAAE,CADK;AAEZC,QAAAA,KAAK,EAAE;AAFK,OAAd;AAID,K;;;;;;;AAlCD;;;;;;;;;;;uBAEqBR,GAAG,CAACsB,eAAJ,CAAoB,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA5C,C;;;AAAbC,gBAAAA,I;AACN;AACA,qBAAKN,QAAL,CAAc;AACZjB,kBAAAA,QAAQ,EAAEuB;AADE,iBAAd;;;;;;;;;;;;;QAKF;;;;AA2BA;6BAES;AAAA,wBAC+B,KAAKxB,KADpC;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWC,eADX,eACWA,eADX,EAEP;AACA;;AACA,UAAI,CAACD,QAAL,EAAe,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AAEf,aACE,oBAAC,QAAD;AACE,QAAA,QAAQ,EAAEA,QADZ;AAEE,QAAA,oBAAoB,EAAEC,eAFxB;AAGE,QAAA,YAAY,EAAE,KAAKK,YAHrB,CAIE;AAJF;AAKE,QAAA,WAAW,EAAE,KAAKD,WALpB;AAME,QAAA,YAAY,EAAE,KAAKS,YANrB;AAOE,QAAA,UAAU,EAAE,KAAKE,UAPnB;AAQE,QAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWI,KARpB;AASE,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWK,KATpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAaD;;;;EArE6BV,S;;AAwEhC,eAAeI,iBAAf","sourcesContent":["import React, { Component, createRef } from 'react';\nimport api from '../../helpers/api';\nimport Category from './Category';\n\nclass CategoryContainer extends Component {\n  state = {\n    category: null,\n    currentQuestion: 0,\n    answerQuestion: null,\n    score: 2,\n    error: 0,\n  }\n\n  // createRef in order to bring back input value to its parent\n  answerInput = createRef();\n\n  // async needed when using promise\n  async componentDidMount() {\n    const data = await api.getCategoryById(this.props.match.params.id);\n    // stored response in the state;\n    this.setState({\n      category: data,\n    });\n  }\n\n  // Vérification de la reponse\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const answer = this.answerInput.current.value;\n    if(answer === this.state.answer) {\n      // On rajoute 1 au score\n      console.log(\"OK\")\n    } else {\n      // On rajoute 1 au nombre d'erreur\n      console.log(\"not ok\")\n    }\n  }\n\n  // Passer à la question suivante \n  nextQuestion = () => {\n    console.log(this.state.category.clues[1].answer);\n  }\n\n  // Le reset du score \n  resetScore = () => {\n    this.setState({\n      score: 0,\n      error: 0,\n    })\n  }\n\n  // \n\n  render() {\n    const { category, currentQuestion } = this.state;\n    // at first render, category will be null so we need to wait\n    // before using data.\n    if (!category) return <div>is loading</div>\n\n    return (\n      <Category\n        category={category}\n        currentQuestionIndex={currentQuestion}\n        handleSubmit={this.handleSubmit}\n        // plug createRef to chidlren\n        answerInput={this.answerInput}\n        nextQuestion={this.nextQuestion}\n        resetScore={this.resetScore}\n        score={this.state.score}\n        error={this.state.error}\n      />\n    );\n  }\n}\n\nexport default CategoryContainer;"]},"metadata":{},"sourceType":"module"}